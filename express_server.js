const express = require("express");
const app = express();
const PORT = 8080;

const bodyParser = require("body-parser"); // convert input to readable string in req.body
app.use(bodyParser.urlencoded({ extended: true }));

const cookieSession = require("cookie-session");
app.use(
  cookieSession({
    name: "session",
    keys: ["key1", "key2"],
  })
);

const bcrypt = require("bcrypt");

// helper functions
const {
  generateRandomString,
  getUserByEmail,
  urlsForUser,
} = require("./helpers");

app.set("view engine", "ejs");

const urlDatabase = {}; // b6UTxQ: { longURL: "http://www.tsn.ca", userID: "aJ48lW" },
const users = {}; // userRandomID: { id: "userRandomID",email: "user@example.com", password: "hashed-password", },
const LENGTH = 6; // length of random string to be generated by generateRandomString()

// GET

// list the URLs of the user
app.get("/urls", (req, res) => {
  const templateVars = {
    urls: urlsForUser(req.session.userID, urlDatabase),
    user: users[req.session.userID],
  };
  if (req.session.userID) {
    res.render("urls_index", templateVars);
  } else {
    res.redirect("/login");
    // res.status(401).render("error401");
  }
});

// form for creating a new URL
app.get("/urls/new", (req, res) => {
  const templateVars = {
    user: users[req.session.userID],
  };
  if (req.session.userID) {
    res.render("urls_new", templateVars);
  } else {
    res.redirect("/login");
  }
});

// details about a specific URL
app.get("/urls/:shortURL", (req, res) => {
  if (
    req.session.userID &&
    req.params.shortURL in urlDatabase &&
    req.session.userID === urlDatabase[req.params.shortURL].userID
  ) {
    const templateVars = {
      shortURL: req.params.shortURL,
      longURL: urlDatabase[req.params.shortURL].longURL,
      user: users[req.session.userID],
    };
    res.render("urls_show", templateVars);
  } else if (!req.session.userID) {
    const templateVars = {
      user: null,
      code: 401,
      message: "You are not logged in.",
    };
    res.status(401).render("error", templateVars);
  } else if (req.session.userID !== urlDatabase[req.params.shortURL].userID) {
    const templateVars = {
      user: null,
      code: 403,
      message: "You are not authorized to access this resource.",
    };
    res.status(403).render("error");
  } else {
    res.status(404).render("error404");
  }
});

// get the actual long URL
app.get("/u/:shortURL", (req, res) => {
  if (urlDatabase[req.params.shortURL].longURL) {
    res.redirect(urlDatabase[req.params.shortURL].longURL);
  } else {
    res.status(404).render("error404");
  }
});

// the register page
app.get("/register", (req, res) => {
  if (req.session.userID) {
    res.redirect("/urls");
  } else {
    res.render("register", { user: null });
  }
});

// the login page
app.get("/login", (req, res) => {
  if (req.session.userID) {
    res.redirect("/urls");
  } else {
    res.render("login", { user: null });
  }
});

// POST

// create new URL
app.post("/urls", (req, res) => {
  const shortURL = generateRandomString(LENGTH);
  if (req.session.userID && req.body.longURL) {
    urlDatabase[shortURL] = {
      longURL: req.body.longURL,
      userID: req.session.userID,
    };
    res.redirect(`/urls/${shortURL}`);
  } else if (!req.session.userID) {
    res.sendStatus(401);
  } else {
    const templateVars = {
      user: users[req.session.userID],
      code: 400,
      message: "The URL form cannot be empty.",
    };
    res.status(400).render("error400", templateVars);
  }
});

// update a URL
app.post("/urls/:shortURL", (req, res) => {
  if (
    req.session.userID &&
    req.params.shortURL in urlDatabase &&
    req.session.userID === urlDatabase[req.params.shortURL].userID
  ) {
    urlDatabase[req.params.shortURL] = {
      longURL: req.body.longURL,
      userID: req.session.userID,
    };
    res.redirect("/urls");
  } else if (!req.session.userID) {
    res.sendStatus(401);
  } else if (!req.session.userID !== urlDatabase[req.params.shortURL].userID) {
    res.sendStatus(403);
  } else if (!req.body.longURL) {
    res.sendStatus(400);
  } else {
    res.sendStatus(404);
  }
});

// delete a URL
app.post("/urls/:shortURL/delete", (req, res) => {
  if (
    req.session.userID &&
    req.params.shortURL in urlDatabase &&
    req.session.userID === urlDatabase[req.params.shortURL].userID
  ) {
    delete urlDatabase[req.params.shortURL];
    res.redirect("/urls");
  } else if (!req.session.userID) {
    res.sendStatus(401);
  } else if (req.session.userID !== urlDatabase[req.params.shortURL].userID) {
    req.sendStatus(403);
  } else {
    res.sendStatus(404);
  }
});

app.post("/register", (req, res) => {
  const existingUser = getUserByEmail(req.body.email, users);
  if (req.body.email && req.body.password && !existingUser) {
    const userID = generateRandomString(LENGTH);
    users[userID] = {
      id: userID,
      email: req.body.email,
      password: bcrypt.hashSync(req.body.password, 10),
    };
    req.session.userID = userID;
    res.redirect("/urls");
  } else if (existingUser) {
    res
      .status(400)
      .send('This account exists; please <a href="/login">login</a>.');
  } else {
    res
      .status(400)
      .send(
        'Email or password are empty. Please <a href="/register">try again</a>.'
      );
  }
});

app.post("/login", (req, res) => {
  const existingUser = getUserByEmail(req.body.email, users);
  if (
    existingUser &&
    req.body.password &&
    bcrypt.compareSync(req.body.password, existingUser.password)
  ) {
    req.session.userID = existingUser.id;
    res.redirect("/urls");
  } else if (
    !existingUser ||
    !bcrypt.compareSync(req.body.password, existingUser.password)
  ) {
    res
      .status(403)
      .send(
        'The email or password is incorrect. Please <a href="/login">try again</a>.'
      );
  } else {
    // email or password are empty
    res.status(400).send('Please <a href="/login">try again</a>.');
  }
});

app.post("/logout", (req, res) => {
  req.session = null;
  res.redirect("/login");
});

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});
