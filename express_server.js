const express = require("express");
// body-parser library
// converts the request body from a Buffer to a string that we can read.
// It will then add a JS object to the `req` object under the  key `body`.
// The input field of our form will be available under `req.body.longURL`
const bcrypt = require("bcrypt");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const { generateRandomString, getUserIdUsingEmail } = require("./helpers");
const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieParser());
app.set("view engine", "ejs");
const PORT = 8080;
const LENGTH = 6; // length of random string to be generated by generateRandomString()

const urlDatabase = {
  // b2xVn2: "http://www.lighthouselabs.ca",
  // "9sm5xK": "http://www.google.com",
  b6UTxQ: { longURL: "http://www.tsn.ca", userID: "aJ48lW" },
  xyz789: { longURL: "https://www.google.ca", userID: "abc123" },
  i3B0Gr: { longURL: "https://www.google.ca", userID: "aJ48lW" },
};

const users = {
  // userRandomID: {
  //   id: "userRandomID",
  //   email: "user@example.com",
  //   password: "hashed-password",
  // },
};

// app.get() and app.post()
// "if you receive an HTTP request with this HTTP method (GET, POST, etc) and this path, execute the callback. The callback may render a template and may use some variables when rendering. Or it may do other things (create, update, delete) and redirect to another resource."

app.get("/urls", (req, res) => {
  const user_id = req.cookies.user_id;
  if (user_id) {
    const templateVars = {
      urls: urlsForUser(user_id),
      user: users[req.cookies.user_id],
    };
    return res.render("urls_index", templateVars);
  }
  res.send(
    '<p>You need to <a href="/login">log in</a> or <a href="/register">register</a> before you can see this page</p>'
  );
});

// Returns the URLs where the user_id is equal to the user_id of the logged in user.
const urlsForUser = function (user_id) {
  const results = {};
  const allShortURLs = Object.keys(urlDatabase);
  const filteredShortURLs = allShortURLs.filter(
    (shortURL) => urlDatabase[shortURL].userID === user_id
  );
  for (shortURL of filteredShortURLs) {
    results[shortURL] = urlDatabase[shortURL];
  }
  return results;
};

// This route definition must come before /urls/:shortURL because Express will think /urls/new is a call to that one.
app.get("/urls/new", (req, res) => {
  const user_id = req.cookies.user_id;
  if (user_id) {
    const templateVars = {
      user: users[user_id],
    };
    return res.render("urls_new", templateVars);
  }
  res.redirect("/login");
});

app.get("/urls/:shortURL", (req, res) => {
  const inputURL = req.params.shortURL;
  const cookie = req.cookies.user_id;
  if (
    inputURL in urlDatabase &&
    cookie &&
    cookie === urlDatabase[inputURL].userID
  ) {
    const templateVars = {
      shortURL: inputURL,
      longURL: urlDatabase[inputURL].longURL,
      user: users[cookie],
    };
    return res.render("urls_show", templateVars);
  }
  res.send(
    '<p>Only the registered user can view or edit this url.</p><p>Please see <a href="/login">log in</a> or <a href="/register">register</a> page.</p>'
  );
});

// Redirect to the longURL
app.get("/u/:shortURL", (req, res) => {
  const longURL = urlDatabase[req.params.shortURL].longURL;
  res.redirect(longURL);
});

app.get("/register", (req, res) => {
  const templateVars = {
    user: users[req.cookies.user_id],
  };
  res.render("register", templateVars);
});

app.get("/login", (req, res) => {
  const templateVars = {
    user: users[req.cookies.user_id],
  };
  res.render("login", templateVars);
});

// CREATE a new URL
app.post("/urls", (req, res) => {
  const shortURL = generateRandomString(LENGTH);
  const longURL = req.body.longURL;
  const user_id = req.cookies.user_id;
  urlDatabase[shortURL] = { longURL: longURL, userID: user_id };
  res.redirect(`/urls/${shortURL}`);
});

// UPDATE a URL
app.post("/urls/:shortURL", (req, res) => {
  const shortURL = req.params.shortURL;
  const user_id = req.cookies.user_id;
  if (urlDatabase[shortURL].userID === user_id) {
    const newLongURL = req.body.newLongURL;
    urlDatabase[shortURL] = { longURL: newLongURL, userID: user_id };
    return res.redirect("/urls");
  }
  res.send("<p>Only the registered user can view or edit this url.</p>");
});

app.post("/urls/:shortURL/delete", (req, res) => {
  const shortURL = req.params.shortURL;
  const user_id = req.cookies.user_id;
  if (urlDatabase[shortURL].userID === user_id) {
    delete urlDatabase[shortURL];
    return res.redirect("/urls");
  }
  res.send("<p>Only the registered user can delete this url.</p>");
});

app.post("/register", (req, res) => {
  const inputEmail = req.body.email;
  const inputPassword = req.body.password;
  if (!inputEmail || !inputPassword || getUserIdUsingEmail(inputEmail, users)) {
    return res.sendStatus(400);
  }
  const user_id = generateRandomString(LENGTH);
  users[user_id] = {
    id: user_id,
    email: inputEmail,
    password: bcrypt.hashSync(inputPassword, 10),
  };
  console.log(users);
  res.cookie("user_id", user_id);
  res.redirect("/urls");
});

app.post("/login", (req, res) => {
  const inputEmail = req.body.email;
  const inputPassword = req.body.password;
  const user_id = getUserIdUsingEmail(inputEmail, users);
  if (user_id) {
    const hashedPassword = users[user_id].password;
    if (bcrypt.compareSync(inputPassword, hashedPassword)) {
      res.cookie("user_id", user_id);
      return res.redirect("/urls");
    }
  }
  res.sendStatus(403);
});

app.post("/logout", (req, res) => {
  res.clearCookie("user_id");
  res.redirect("/login");
});

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});
