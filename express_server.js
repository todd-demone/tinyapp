const express = require("express");
// body-parser library
// converts the request body from a Buffer to a string that we can read.
// It will then add a JS object to the `req` object under the  key `body`.
// The input field of our form will be available under `req.body.longURL`
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const { generateRandomString, isEmailAlreadyRegistered } = require("./helpers");
const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieParser());
app.set("view engine", "ejs");
const PORT = 8080;
const LENGTH = 6; // length of random string to be generated by generateRandomString()

const urlDatabase = {
  b2xVn2: "http://www.lighthouselabs.ca",
  "9sm5xK": "http://www.google.com",
};

const users = {
  // userRandomID: {
  //   id: "userRandomID",
  //   email: "user@example.com",
  //   password: "purple-monkey-dinosaur",
  // },
};

// app.get() and app.post()
// "if you receive an HTTP request with this HTTP method (GET, POST, etc) and this path, execute the callback. The callback may render a template and may use some variables when rendering. Or it may do other things (create, update, delete) and redirect to another resource."

// GET the 'My URLS' home page - render a list of shortened websites.
app.get("/urls", (req, res) => {
  const templateVars = {
    urls: urlDatabase,
    user: users[req.cookies.user_id],
  };
  res.render("urls_index", templateVars);
});

// GET the 'Create New URL' page
// This route definition must come before /urls/:shortURL because Express will think /urls/new is a call to that one.
app.get("/urls/new", (req, res) => {
  const templateVars = {
    user: users[req.cookies.user_id],
  };
  res.render("urls_new", templateVars);
});

// GET the page for a specific shortURL
app.get("/urls/:shortURL", (req, res) => {
  const templateVars = {
    shortURL: req.params.shortURL,
    longURL: urlDatabase[req.params.shortURL],
    user: users[req.cookies.user_id],
  };
  res.render("urls_show", templateVars);
});

// GET this resource and redirect to the longURL
app.get("/u/:shortURL", (req, res) => {
  const longURL = urlDatabase[req.params.shortURL];
  res.redirect(longURL);
});

// GET registration page
app.get("/register", (req, res) => {
  const templateVars = {
    user: users[req.cookies.user_id],
  };
  res.render("register", templateVars);
});

// CREATE a new URL from the form on the 'Create New URL' page (using POST method)
app.post("/urls", (req, res) => {
  const shortURL = generateRandomString(LENGTH);
  const longURL = req.body.longURL;
  urlDatabase[shortURL] = longURL;
  res.redirect(`/urls/${shortURL}`);
});

// UPDATE a URL using the Submit button on the urls_show.ejs page (using POST method)
app.post("/urls/:shortURL", (req, res) => {
  const shortURL = req.params.shortURL;
  const newLongURL = req.body.newLongURL;
  urlDatabase[shortURL] = newLongURL;
  res.redirect("/urls");
});

// DELETE a URL from the Delete button on the 'My URLS' page (using POST METHOD)
app.post("/urls/:shortURL/delete", (req, res) => {
  delete urlDatabase[req.params.shortURL];
  res.redirect("/urls");
});

// Register a new user
app.post("/register", (req, res) => {
  const user_id = generateRandomString(LENGTH);
  const email = req.body.email;
  const password = req.body.password;
  if (!email || !password || isEmailAlreadyRegistered(email, users)) {
    return res.sendStatus(400);
  }
  users[user_id] = {
    id: user_id,
    email: email,
    password: password,
  };
  res.cookie("user_id", users[user_id]["id"]);
  res.redirect("/urls");
});
// CREATE a cookie with the key `username` (using POST method); redirect to /urls
app.post("/login", (req, res) => {
  // get username value sent by POST
  res.cookie("username", req.body.username);
  res.redirect("/urls");
});

// Clear the cookie with the key `username`
app.post("/logout", (req, res) => {
  res.clearCookie("username");
  res.redirect("/urls");
});

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});
