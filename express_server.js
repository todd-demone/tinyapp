const express = require("express");
const bcrypt = require("bcrypt");
const bodyParser = require("body-parser"); // convert input to readable string in req.body
const cookieSession = require("cookie-session");
const {
  generateRandomString,
  getUserByEmail,
  urlsForUser,
} = require("./helpers");

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(
  cookieSession({
    name: "session",
    keys: ["key1", "key2"],
  })
);
app.set("view engine", "ejs");

const PORT = 8080;
const urlDatabase = {}; // b6UTxQ: { longURL: "http://www.tsn.ca", userID: "aJ48lW" },
const users = {}; // userRandomID: { id: "userRandomID",email: "user@example.com", password: "hashed-password", },
const LENGTH = 6; // length of random string to be generated by generateRandomString()

/* ROUTES
1. GET /register
2. POST /register
3. GET /login
4. POST /login
5. POST /logout
6. GET /urls - list of user's URLs
7. GET /urls/new - form for creating URL - route must come before /urls/:shortURL
8. POST /urls - create new URL
9. GET /urls/:shortURL - details about a specific URL; form for updating URL
10. POST /urls/:shortURL - update URL
11. POST /urls/:shortURL/delete
12. GET /u/:shortURL - redirect to longURL
*/
app.get("/register", (req, res) => {
  const templateVars = { user: users[req.session.userID] };
  res.render("register", templateVars);
});

app.post("/register", (req, res) => {
  const inputEmail = req.body.email;
  const inputPassword = req.body.password;
  const existingUser = getUserByEmail(inputEmail, users);
  if (!inputEmail || !inputPassword || existingUser) {
    return res.status(400).render("error400");
  }
  const userID = generateRandomString(LENGTH);
  const hashedPassword = bcrypt.hashSync(inputPassword, 10);
  users[userID] = {
    id: userID,
    email: inputEmail,
    password: hashedPassword,
  };
  req.session.userID = userID;
  res.redirect("/urls");
});

app.get("/login", (req, res) => {
  const templateVars = { user: users[req.session.userID] };
  res.render("login", templateVars);
});

app.post("/login", (req, res) => {
  const inputEmail = req.body.email;
  const existingUser = getUserByEmail(inputEmail, users);
  if (!existingUser) {
    return res.status(403).render("error401"); // the project rubric requires the HTTP response to include a 403 code, but authentication errors should throw a 401 code (https://stackoverflow.com/questions/3297048/403-forbidden-vs-401-unauthorized-http-responses). Therefore I'm rendering a 401 page.
  }
  const inputPassword = req.body.password;
  const passwordIsCorrect = bcrypt.compareSync(
    inputPassword,
    existingUser.password
  );
  if (existingUser && passwordIsCorrect) {
    req.session.userID = existingUser.id;
    return res.redirect("/urls");
  } else {
    return res.status(403).render("error401"); // see first conditional in this route for why the status code and view don't align.
  }
});

app.post("/logout", (req, res) => {
  req.session = null;
  res.redirect("/login");
});

app.get("/urls", (req, res) => {
  const userIDCookie = req.session.userID;
  if (!userIDCookie) {
    return res.status(401).redirect("/login");
  }
  const templateVars = {
    urls: urlsForUser(userIDCookie, urlDatabase),
    user: users[userIDCookie],
  };
  res.render("urls_index", templateVars);
});

app.get("/urls/new", (req, res) => {
  const userIDCookie = req.session.userID;
  const templateVars = { user: users[userIDCookie] };
  if (!userIDCookie) {
    return res.status(401).redirect("/login");
  }
  res.render("urls_new", templateVars);
});

app.post("/urls", (req, res) => {
  const shortURL = generateRandomString(LENGTH);
  const longURL = req.body.longURL;
  const userIDCookie = req.session.userID;
  if (!longURL) {
    return res.status(400).render("error400");
  }
  if (!userIDCookie) {
    return res.status(401).redirect("/login");
  }
  urlDatabase[shortURL] = {
    longURL: longURL,
    userID: userIDCookie,
  };
  res.redirect(`/urls/${shortURL}`);
});

app.get("/urls/:shortURL", (req, res) => {
  const inputURL = req.params.shortURL;
  const userIDCookie = req.session.userID;
  if (!(inputURL in urlDatabase)) {
    return res.status(404).render("error404");
  }
  if (!userIDCookie) {
    return res.status(401).redirect("/login");
  }
  if (userIDCookie !== urlDatabase[inputURL].userID) {
    return res.status(403).render("error403");
  }
  const templateVars = {
    shortURL: inputURL,
    longURL: urlDatabase[inputURL].longURL,
    user: users[userIDCookie],
  };
  res.render("urls_show", templateVars);
});

app.post("/urls/:shortURL", (req, res) => {
  const inputURL = req.params.shortURL;
  const userIDCookie = req.session.userID;
  const newLongURL = req.body.newLongURL;
  if (!newLongURL) {
    return res.status(400).render("error400");
  }
  if (
    !(inputURL in urlDatabase) ||
    !userIDCookie ||
    userIDCookie !== urlDatabase[inputURL].userID
  ) {
    return res.sendStatus(403);
  }
  urlDatabase[inputURL] = {
    longURL: newLongURL,
    userID: userIDCookie,
  };
  res.redirect("/urls");
});

app.post("/urls/:shortURL/delete", (req, res) => {
  const inputURL = req.params.shortURL;
  const userIDCookie = req.session.userID;
  if (
    !(inputURL in urlDatabase) ||
    !userIDCookie ||
    userIDCookie !== urlDatabase[inputURL].userID
  ) {
    return res.sendStatus(403);
  }
  delete urlDatabase[inputURL];
  res.redirect("/urls");
});

app.get("/u/:shortURL", (req, res) => {
  const longURL = urlDatabase[req.params.shortURL].longURL;
  res.redirect(longURL);
});

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});
