const express = require("express");
const bodyParser = require("body-parser"); // convert input to readable string in req.body
const cookieSession = require("cookie-session");
const methodOverride = require('method-override');

const { generateRandomString } = require("./helpers");

const userRouter = require('./routers/userRouter');
const urlRouter = require('./routers/urlRouter');

const app = express();
const port = 8080;

const urlDatabase = {}; // b6UTxQ: { longURL: "http://www.tsn.ca", userID: "aJ48lW", visitorIDs: [abc123, def456, ghi789], visitLog: [{ timestamp: 2021-12..., visitorID: abc123 }] },
const users = {}; // userRandomID: { id: "userRandomID", email: "user@example.com", password: "hashed-password", visitorIDs: { shortURL1: myVisitorID1, shortURL2: myVisitorID2 } },
const LENGTH = 6; // length of the random string to be generated by generateRandomString()

app.set("view engine", "ejs");

app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieSession({ name: "session", keys: ["key1", "key2"] }));
app.use(methodOverride('_method'));

app.get("/u/:shortURL", (req, res) => {
  const shortURL = req.params.shortURL;
  const userID = req.session.userID ? req.session.userID : null;
  const user = users[userID] ? users[userID] : null;
  // The shortURL doesn't exist 
  if (!(shortURL in urlDatabase)) {
    const templateVars = {
      user: user,
      code: 404,
      message: "Page not found",
    };
    return res.status(404).render("error", templateVars);
  }
  
  // check if visitor has visited this URL before; if not, assign a unique cookie for this URL
  if (!req.session.visitorIDs) {
    req.session.visitorIDs = {};
  }
  if (!(req.session.visitorIDs[shortURL])) {
    const visitorID = generateRandomString();
    req.session.visitorIDs[shortURL] = visitorID;
    if (user && !(user.visitorIDs[shortURL])) {
      user.visitorIDs[shortURL] = visitorID;
    }
    urlDatabase[shortURL].visitorIDs.push(visitorID);
  }

  // keep track of every visit (timestamp, visitorID)
  const visitDetails = {
    timestamp: new Date(),
    visitorID: req.session.visitorIDs[shortURL],
  };
  urlDatabase[shortURL].visitLog.push(visitDetails);
  
  // redirect to the long URL
  res.redirect(urlDatabase[req.params.shortURL].longURL);
});

// catch-all for non-existing pages
// app.get("*", (req, res) => {
//   const templateVars = {
//     user: users[req.session.userID],
//     code: 404,
//     message: "Page not found",
//   };
//   res.render("error", templateVars);
// });

app.use("/users", userRouter(users));
app.use("/urls", urlRouter(users, urlDatabase));

app.listen(port, () => {
  console.log(`Example app listening on port ${port}!`);
});
